/* eslint-disable @typescript-eslint/no-require-imports */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing Supabase configuration')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function setupDatabase() {
  console.log('๐ ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช...')

  try {
    // ุฅูุดุงุก ุฌุฏูู ุงููุณุชุฎุฏููู
    console.log('๐ ุฅูุดุงุก ุฌุฏูู ุงููุณุชุฎุฏููู...')
    const { error: usersError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS users (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          email TEXT UNIQUE NOT NULL,
          role TEXT DEFAULT 'user' CHECK (role IN ('admin', 'user')),
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );

        -- ุชุนุทูู RLS ููุฌุฏูู ูุคูุชุงู ููุงุฎุชุจุงุฑ
        ALTER TABLE users DISABLE ROW LEVEL SECURITY;

        -- ุฅูุดุงุก ุฏุงูุฉ ููุชุญูู ูู ุงููุณุชุฎุฏู ุงูุฅุฏุงุฑู
        CREATE OR REPLACE FUNCTION check_admin_user(user_email TEXT)
        RETURNS TABLE(email TEXT, role TEXT) AS $$
        BEGIN
          RETURN QUERY
          SELECT u.email, u.role
          FROM users u
          WHERE u.email = user_email AND u.role = 'admin';
        END;
        $$ LANGUAGE plpgsql SECURITY DEFINER;
      `
    })

    if (usersError) {
      console.log('ุฌุฏูู ุงููุณุชุฎุฏููู ููุฌูุฏ ุจุงููุนู ุฃู ุชู ุฅูุดุงุคู')
    }

    // ุฅูุดุงุก ุฌุฏูู ุงูุตููู
    console.log('๐ ุฅูุดุงุก ุฌุฏูู ุงูุตููู...')
    const { error: gradesError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS grades (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          name TEXT NOT NULL,
          shift TEXT NOT NULL CHECK (shift IN ('A', 'B')),
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `
    })

    if (gradesError) {
      console.log('ุฌุฏูู ุงูุตููู ููุฌูุฏ ุจุงููุนู ุฃู ุชู ุฅูุดุงุคู')
    }

    // ุฅูุดุงุก ุฌุฏูู ุงูุดุนุจ
    console.log('๐ฅ ุฅูุดุงุก ุฌุฏูู ุงูุดุนุจ...')
    const { error: sectionsError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS sections (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          name TEXT NOT NULL,
          grade_id UUID REFERENCES grades(id) ON DELETE CASCADE,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `
    })

    if (sectionsError) {
      console.log('ุฌุฏูู ุงูุดุนุจ ููุฌูุฏ ุจุงููุนู ุฃู ุชู ุฅูุดุงุคู')
    }

    // ุฅูุดุงุก ุฌุฏูู ุงูุฌุฏุงูู ุงูุฏุฑุงุณูุฉ
    console.log('๐ ุฅูุดุงุก ุฌุฏูู ุงูุฌุฏุงูู ุงูุฏุฑุงุณูุฉ...')
    const { error: schedulesError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS schedules (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          grade_id UUID REFERENCES grades(id) ON DELETE CASCADE,
          section_id UUID REFERENCES sections(id) ON DELETE CASCADE,
          image_url TEXT,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `
    })

    if (schedulesError) {
      console.log('ุฌุฏูู ุงูุฌุฏุงูู ุงูุฏุฑุงุณูุฉ ููุฌูุฏ ุจุงููุนู ุฃู ุชู ุฅูุดุงุคู')
    }

    // ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ ููุตููู ูุงูุดุนุจ
    console.log('๐ ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ...')

    // ุงููุฌุจุฉ A
    const gradesA = [
      'ุงูุฃูู', 'ุงูุซุงูู', 'ุงูุซุงูุซ', 'ุงูุฑุงุจุน', 'ุงูุฎุงูุณ', 'ุงูุณุงุฏุณ'
    ]

    // ุงููุฌุจุฉ B
    const gradesB = [
      'ุงูุฃูู', 'ุงูุซุงูู', 'ุงูุซุงูุซ', 'ุงูุฑุงุจุน', 'ุงูุฎุงูุณ', 'ุงูุณุงุฏุณ'
    ]

    const sections = ['ุฃ', 'ุจ', 'ุฌ']

    // ุฅุฏุฑุงุฌ ุตููู ุงููุฌุจุฉ A
    for (const gradeName of gradesA) {
      const { data: grade, error } = await supabase
        .from('grades')
        .upsert({ name: gradeName, shift: 'A' }, { onConflict: 'name,shift' })
        .select()
        .single()

      if (grade) {
        // ุฅุฏุฑุงุฌ ุงูุดุนุจ ููู ุตู
        for (const sectionName of sections) {
          await supabase
            .from('sections')
            .upsert({ name: sectionName, grade_id: grade.id }, { onConflict: 'name,grade_id' })
        }
      }
    }

    // ุฅุฏุฑุงุฌ ุตููู ุงููุฌุจุฉ B
    for (const gradeName of gradesB) {
      const { data: grade, error } = await supabase
        .from('grades')
        .upsert({ name: gradeName, shift: 'B' }, { onConflict: 'name,shift' })
        .select()
        .single()

      if (grade) {
        // ุฅุฏุฑุงุฌ ุงูุดุนุจ ููู ุตู
        for (const sectionName of sections) {
          await supabase
            .from('sections')
            .upsert({ name: sectionName, grade_id: grade.id }, { onConflict: 'name,grade_id' })
        }
      }
    }

    // ุฅูุดุงุก ูุณุชุฎุฏู ุฅุฏุงุฑู ูู ูุธุงู ุงููุตุงุฏูุฉ
    console.log('๐ค ุฅูุดุงุก ูุณุชุฎุฏู ุฅุฏุงุฑู...')
    const adminEmail = 'admin@mohamedalfateh.edu'
    const adminPassword = 'Admin123!@#'

    try {
      // ุฅูุดุงุก ุงููุณุชุฎุฏู ูู ูุธุงู Supabase Auth
      const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
        email: adminEmail,
        password: adminPassword,
        email_confirm: true
      })

      if (authError && !authError.message.includes('already registered')) {
        console.error('ุฎุทุฃ ูู ุฅูุดุงุก ูุณุชุฎุฏู ุงููุตุงุฏูุฉ:', authError)
      } else {
        console.log('โ ุชู ุฅูุดุงุก ูุณุชุฎุฏู ุงููุตุงุฏูุฉ ุจูุฌุงุญ')
      }

      // ุฅูุดุงุก ุงููุณุชุฎุฏู ูู ุฌุฏูู users
      const { data: userData, error: adminError } = await supabase
        .from('users')
        .upsert({
          email: adminEmail,
          role: 'admin'
        }, { onConflict: 'email' })
        .select()

      if (adminError) {
        console.log('ุฎุทุฃ ูู ุฅูุดุงุก ุงููุณุชุฎุฏู ูู ุงูุฌุฏูู:', adminError)
      } else {
        console.log('โ ุชู ุฅูุดุงุก ุงููุณุชุฎุฏู ูู ุฌุฏูู users ุจูุฌุงุญ')
      }

      // ุงูุชุญูู ูู ูุฌูุฏ ุงููุณุชุฎุฏู
      const { data: checkUser, error: checkError } = await supabase
        .from('users')
        .select('*')
        .eq('email', adminEmail)
        .single()

      if (checkUser) {
        console.log('โ ุชู ุงูุชุญูู ูู ูุฌูุฏ ุงููุณุชุฎุฏู:', checkUser)
      } else {
        console.log('โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููุณุชุฎุฏู:', checkError)
      }
    } catch (error) {
      console.log('ุงููุณุชุฎุฏู ุงูุฅุฏุงุฑู ููุฌูุฏ ุจุงููุนู ุฃู ุชู ุฅูุดุงุคู')
    }

    // ุฅุนุฏุงุฏ RLS policies ููุฌุฏุงูู
    console.log('๐ ุฅุนุฏุงุฏ RLS policies...')

    // ุชุนุทูู RLS ูุคูุชุงู ููุฌุฏุงูู ุงูุฃุณุงุณูุฉ
    const disableRLSQueries = [
      'ALTER TABLE public.grades DISABLE ROW LEVEL SECURITY;',
      'ALTER TABLE public.sections DISABLE ROW LEVEL SECURITY;',
      'ALTER TABLE public.schedules DISABLE ROW LEVEL SECURITY;',
      'ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;'
    ]

    for (const query of disableRLSQueries) {
      try {
        const { error } = await supabase.rpc('exec', { sql: query })
        if (error) {
          console.log('ุฎุทุฃ ูู ุชุนุทูู RLS:', error.message)
        }
      } catch (error) {
        console.log('ุชู ุชุนุทูู RLS ุฃู ูู ูุนุทู ุจุงููุนู')
      }
    }

    console.log('โ ุชู ุชุนุทูู RLS ููุฌุฏุงูู ุงูุฃุณุงุณูุฉ')

    // ุฅูุดุงุก bucket ููุฌุฏุงูู ุงูุฏุฑุงุณูุฉ
    console.log('๐ ุฅูุดุงุก bucket ููุฌุฏุงูู ุงูุฏุฑุงุณูุฉ...')
    const { error: bucketError } = await supabase.storage.createBucket('schedules', {
      public: true,
      allowedMimeTypes: ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'],
      fileSizeLimit: 10485760 // 10MB
    })

    if (bucketError && bucketError.message !== 'Bucket already exists') {
      console.log('ุฎุทุฃ ูู ุฅูุดุงุก bucket:', bucketError)
    } else {
      console.log('โ ุชู ุฅูุดุงุก bucket ููุฌุฏุงูู ุงูุฏุฑุงุณูุฉ')
    }

    console.log('โ ุชู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!')
    console.log('๐ง ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ููุฅุฏุงุฑุฉ: admin@mohamedalfateh.edu')
    console.log('๐ ูููุฉ ุงููุฑูุฑ: Admin123!@#')

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error)
  }
}

setupDatabase()
